// Code generated by capnpc-go. DO NOT EDIT.

package vncapnp

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type StringWrapper struct{ capnp.Struct }

// StringWrapper_TypeID is the unique identifier for the type StringWrapper.
const StringWrapper_TypeID = 0xf9282a9b6c819641

func NewStringWrapper(s *capnp.Segment) (StringWrapper, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringWrapper{st}, err
}

func NewRootStringWrapper(s *capnp.Segment) (StringWrapper, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringWrapper{st}, err
}

func ReadRootStringWrapper(msg *capnp.Message) (StringWrapper, error) {
	root, err := msg.RootPtr()
	return StringWrapper{root.Struct()}, err
}

func (s StringWrapper) String() string {
	str, _ := text.Marshal(0xf9282a9b6c819641, s.Struct)
	return str
}

func (s StringWrapper) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StringWrapper) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StringWrapper) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StringWrapper) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// StringWrapper_List is a list of StringWrapper.
type StringWrapper_List struct{ capnp.List }

// NewStringWrapper creates a new list of StringWrapper.
func NewStringWrapper_List(s *capnp.Segment, sz int32) (StringWrapper_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return StringWrapper_List{l}, err
}

func (s StringWrapper_List) At(i int) StringWrapper { return StringWrapper{s.List.Struct(i)} }

func (s StringWrapper_List) Set(i int, v StringWrapper) error { return s.List.SetStruct(i, v.Struct) }

func (s StringWrapper_List) String() string {
	str, _ := text.MarshalList(0xf9282a9b6c819641, s.List)
	return str
}

// StringWrapper_Promise is a wrapper for a StringWrapper promised by a client call.
type StringWrapper_Promise struct{ *capnp.Pipeline }

func (p StringWrapper_Promise) Struct() (StringWrapper, error) {
	s, err := p.Pipeline.Struct()
	return StringWrapper{s}, err
}

type StringWrapperList struct{ capnp.Struct }

// StringWrapperList_TypeID is the unique identifier for the type StringWrapperList.
const StringWrapperList_TypeID = 0xecac44c78d0858b0

func NewStringWrapperList(s *capnp.Segment) (StringWrapperList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringWrapperList{st}, err
}

func NewRootStringWrapperList(s *capnp.Segment) (StringWrapperList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringWrapperList{st}, err
}

func ReadRootStringWrapperList(msg *capnp.Message) (StringWrapperList, error) {
	root, err := msg.RootPtr()
	return StringWrapperList{root.Struct()}, err
}

func (s StringWrapperList) String() string {
	str, _ := text.Marshal(0xecac44c78d0858b0, s.Struct)
	return str
}

func (s StringWrapperList) Arr() (StringWrapper_List, error) {
	p, err := s.Struct.Ptr(0)
	return StringWrapper_List{List: p.List()}, err
}

func (s StringWrapperList) HasArr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StringWrapperList) SetArr(v StringWrapper_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewArr sets the arr field to a newly
// allocated StringWrapper_List, preferring placement in s's segment.
func (s StringWrapperList) NewArr(n int32) (StringWrapper_List, error) {
	l, err := NewStringWrapper_List(s.Struct.Segment(), n)
	if err != nil {
		return StringWrapper_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// StringWrapperList_List is a list of StringWrapperList.
type StringWrapperList_List struct{ capnp.List }

// NewStringWrapperList creates a new list of StringWrapperList.
func NewStringWrapperList_List(s *capnp.Segment, sz int32) (StringWrapperList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return StringWrapperList_List{l}, err
}

func (s StringWrapperList_List) At(i int) StringWrapperList {
	return StringWrapperList{s.List.Struct(i)}
}

func (s StringWrapperList_List) Set(i int, v StringWrapperList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s StringWrapperList_List) String() string {
	str, _ := text.MarshalList(0xecac44c78d0858b0, s.List)
	return str
}

// StringWrapperList_Promise is a wrapper for a StringWrapperList promised by a client call.
type StringWrapperList_Promise struct{ *capnp.Pipeline }

func (p StringWrapperList_Promise) Struct() (StringWrapperList, error) {
	s, err := p.Pipeline.Struct()
	return StringWrapperList{s}, err
}

const schema_df50359faf84cbef = "x\xda\x12\x98\xed\xc0d\xc8*\xcf\xcc\xc0\x10\xa8\xc2\xca" +
	"\xf6\x7fC\x04G\xefq\x975o\x18\x04\xd5\x18\xff\xbf" +
	"?\xdd\xb2~\xbei\xc0}\x06VFv\x06\x06\xe3R" +
	"\xc6C\x8c\xc2\xbd \xa6p'\xa3=\x03\xe3\x7f\xc7i" +
	"\x8d9\xb3\xb54~bS\xbc\x93q\x11\xa3\xf0E\xb0" +
	"\xe2\xb3\x8c\xf6\x0c~\xff\x93\x13\x0b\xf2\x0a\xf4\xf3\xf2\xd9" +
	"RR\xf5\x93\xf3ss\xf3\xf3\xf4\x83K\x8a2\xf3\xd2" +
	"\xc3\x8b\x12\x0b\x0aR\x8b\xf4\xc0\x0a\xacP\xc4|2\x8b" +
	"K\x18\x02\x18\x19\x03Y\x98Y\x18\x18X\x18\x19\x18\x04" +
	"y\x95\x18\x18\x029\x98\x19\x03U\x98\x18\xd9\x13\x8b\x8a" +
	"\x18\xf9\x18\x18\x03\x98\x19\x19\x05\x10\xaea`\x04\x09\xc2" +
	"-d%\xd6B\xf6\x82\xd4\"\x1c\x96\x8901\xb2\x17" +
	"\x97\x141\xf2001\xf200\x02\x02\x00\x00\xff\xff" +
	"8}V\x05"

func init() {
	schemas.Register(schema_df50359faf84cbef,
		0xecac44c78d0858b0,
		0xf9282a9b6c819641)
}
