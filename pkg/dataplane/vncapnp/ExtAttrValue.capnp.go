// Code generated by capnpc-go. DO NOT EDIT.

package vncapnp

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ExtAttrValue struct{ capnp.Struct }
type ExtAttrValue_Which uint16

const (
	ExtAttrValue_Which_qword          ExtAttrValue_Which = 0
	ExtAttrValue_Which_uqword         ExtAttrValue_Which = 1
	ExtAttrValue_Which_blob           ExtAttrValue_Which = 2
	ExtAttrValue_Which_notExists      ExtAttrValue_Which = 3
	ExtAttrValue_Which_str            ExtAttrValue_Which = 4
	ExtAttrValue_Which_qwordIncrement ExtAttrValue_Which = 5
	ExtAttrValue_Which_time           ExtAttrValue_Which = 6
	ExtAttrValue_Which_dfloat         ExtAttrValue_Which = 7
	ExtAttrValue_Which_floatIncrement ExtAttrValue_Which = 8
	ExtAttrValue_Which_boolean        ExtAttrValue_Which = 9
)

func (w ExtAttrValue_Which) String() string {
	const s = "qworduqwordblobnotExistsstrqwordIncrementtimedfloatfloatIncrementboolean"
	switch w {
	case ExtAttrValue_Which_qword:
		return s[0:5]
	case ExtAttrValue_Which_uqword:
		return s[5:11]
	case ExtAttrValue_Which_blob:
		return s[11:15]
	case ExtAttrValue_Which_notExists:
		return s[15:24]
	case ExtAttrValue_Which_str:
		return s[24:27]
	case ExtAttrValue_Which_qwordIncrement:
		return s[27:41]
	case ExtAttrValue_Which_time:
		return s[41:45]
	case ExtAttrValue_Which_dfloat:
		return s[45:51]
	case ExtAttrValue_Which_floatIncrement:
		return s[51:65]
	case ExtAttrValue_Which_boolean:
		return s[65:72]

	}
	return "ExtAttrValue_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ExtAttrValue_TypeID is the unique identifier for the type ExtAttrValue.
const ExtAttrValue_TypeID = 0x9bb0f31edcf7bd65

func NewExtAttrValue(s *capnp.Segment) (ExtAttrValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExtAttrValue{st}, err
}

func NewRootExtAttrValue(s *capnp.Segment) (ExtAttrValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExtAttrValue{st}, err
}

func ReadRootExtAttrValue(msg *capnp.Message) (ExtAttrValue, error) {
	root, err := msg.RootPtr()
	return ExtAttrValue{root.Struct()}, err
}

func (s ExtAttrValue) String() string {
	str, _ := text.Marshal(0x9bb0f31edcf7bd65, s.Struct)
	return str
}

func (s ExtAttrValue) Which() ExtAttrValue_Which {
	return ExtAttrValue_Which(s.Struct.Uint16(8))
}
func (s ExtAttrValue) Qword() int64 {
	if s.Struct.Uint16(8) != 0 {
		panic("Which() != qword")
	}
	return int64(s.Struct.Uint64(0))
}

func (s ExtAttrValue) SetQword(v int64) {
	s.Struct.SetUint16(8, 0)
	s.Struct.SetUint64(0, uint64(v))
}

func (s ExtAttrValue) Uqword() uint64 {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != uqword")
	}
	return s.Struct.Uint64(0)
}

func (s ExtAttrValue) SetUqword(v uint64) {
	s.Struct.SetUint16(8, 1)
	s.Struct.SetUint64(0, v)
}

func (s ExtAttrValue) Blob() ([]byte, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != blob")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ExtAttrValue) HasBlob() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ExtAttrValue) SetBlob(v []byte) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetData(0, v)
}

func (s ExtAttrValue) SetNotExists() {
	s.Struct.SetUint16(8, 3)

}

func (s ExtAttrValue) Str() (string, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != str")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ExtAttrValue) HasStr() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ExtAttrValue) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ExtAttrValue) SetStr(v string) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetText(0, v)
}

func (s ExtAttrValue) QwordIncrement() int64 {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != qwordIncrement")
	}
	return int64(s.Struct.Uint64(0))
}

func (s ExtAttrValue) SetQwordIncrement(v int64) {
	s.Struct.SetUint16(8, 5)
	s.Struct.SetUint64(0, uint64(v))
}

func (s ExtAttrValue) Time() (TimeSpec, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != time")
	}
	p, err := s.Struct.Ptr(0)
	return TimeSpec{Struct: p.Struct()}, err
}

func (s ExtAttrValue) HasTime() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ExtAttrValue) SetTime(v TimeSpec) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTime sets the time field to a newly
// allocated TimeSpec struct, preferring placement in s's segment.
func (s ExtAttrValue) NewTime() (TimeSpec, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewTimeSpec(s.Struct.Segment())
	if err != nil {
		return TimeSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ExtAttrValue) Dfloat() float64 {
	if s.Struct.Uint16(8) != 7 {
		panic("Which() != dfloat")
	}
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s ExtAttrValue) SetDfloat(v float64) {
	s.Struct.SetUint16(8, 7)
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s ExtAttrValue) FloatIncrement() float64 {
	if s.Struct.Uint16(8) != 8 {
		panic("Which() != floatIncrement")
	}
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s ExtAttrValue) SetFloatIncrement(v float64) {
	s.Struct.SetUint16(8, 8)
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s ExtAttrValue) Boolean() bool {
	if s.Struct.Uint16(8) != 9 {
		panic("Which() != boolean")
	}
	return s.Struct.Bit(0)
}

func (s ExtAttrValue) SetBoolean(v bool) {
	s.Struct.SetUint16(8, 9)
	s.Struct.SetBit(0, v)
}

// ExtAttrValue_List is a list of ExtAttrValue.
type ExtAttrValue_List struct{ capnp.List }

// NewExtAttrValue creates a new list of ExtAttrValue.
func NewExtAttrValue_List(s *capnp.Segment, sz int32) (ExtAttrValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return ExtAttrValue_List{l}, err
}

func (s ExtAttrValue_List) At(i int) ExtAttrValue { return ExtAttrValue{s.List.Struct(i)} }

func (s ExtAttrValue_List) Set(i int, v ExtAttrValue) error { return s.List.SetStruct(i, v.Struct) }

func (s ExtAttrValue_List) String() string {
	str, _ := text.MarshalList(0x9bb0f31edcf7bd65, s.List)
	return str
}

// ExtAttrValue_Promise is a wrapper for a ExtAttrValue promised by a client call.
type ExtAttrValue_Promise struct{ *capnp.Pipeline }

func (p ExtAttrValue_Promise) Struct() (ExtAttrValue, error) {
	s, err := p.Pipeline.Struct()
	return ExtAttrValue{s}, err
}

func (p ExtAttrValue_Promise) Time() TimeSpec_Promise {
	return TimeSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_8a6e4e6e3e2db81e = "x\xdaL\xcf\xcfk\x13A\x1c\x05\xf0\xf7fw\x93\xae" +
	"MhdF\xe8\xc5Z\xa5B\x14kR[\x11\x8b\x98" +
	"*\xe4\xe0E\x8c\x0b\xde\xf3c\x85B\xb2\x13\x93)-" +
	"^\xbc{\xf0\xe0\xd5\x93\xff\x81\x17A\x0f\"\xfe\x0f\x1e" +
	"\xfd\x0f<\x89`\xfd\xfd\x95\xef\xaa\xd0\xe3\x9b\x0f\xef\xcd" +
	"L\xdbq\xc7l$\xfb\x11\xd0k&\x15\xc9\xdf\x1c~" +
	"X\xf9\xfc\xe2\x19zgid\xe5\xd5\xfa\xf5\xe2v\xf1" +
	"\x18]V\x8f1\xde|\xce\xa7\xb4\xafY\x056_\xf2" +
	"\x8a\xc1H\x86\xfdi1m\x15>\x19\xe5\xad\xa1\x9fL" +
	"|\xd1\xea\x1e\x84\x1b!\xcc\xee\xf5\xc7{\xf9\xc5\xd2\xb7" +
	"\x8f\x1c1\xbfC\xf6\x9aQ\\\x13\x89\x09\xd8\x94\x97\x80" +
	",f\xc4\xacA\xc3:\x7f\x8b\xa3B\x9d\xdb@\xb6\xa0" +
	"\xe0\x14\xcc/q4\x80=\xce\xf3@VSXV\x88" +
	"~\x8ac\x04\xd8\x13\xbc\x0bdNaU!\xfe!\x8e" +
	"1`O\xf2\x0c\x90-+\xac)$\xdf\xc51\x01\xec" +
	"i>\x04\xb2U\x85\x0b\x0a\x95o\xe2X\x01\xec\xb9\xf2" +
	"\x8e5\x85\xb6B\xf5\xab8\xfd\xb7]/_\xd5T\xd8" +
	"RX8\x14\xc7\x05\xc0n\x94Sm\x85k\x0a\xe9\x17" +
	"qL\x01{\x957\x81lKa\x87\x86\xa7\x1e\xec\xfb" +
	"\xd9\x88\x09\x0c\x13\xb0\xb3\xf77\xa60L\xc1\xa5\xc1\xd8" +
	"\x0fX\x87a\x1d\x94\xc2\x87\xee\xc1\xee<\x80sT\xaa" +
	"\xf30c\x0d\x865P\xca\xd2\xadb\x88\xce,\x9f\xe4" +
	"E\xf8?\xb7\x14v'9\x1b\xf2\xfe\xdd\xc7\xcb\x9f\x9e" +
	"L\xdf\x02d\x03\xec\x8c\xee\x8f}?p\x11\x86\x8b\xa0" +
	"\x94\xe9h\xfd\x1f<\x1ax?\xce\xfb\x05\x09C\x82\x7f" +
	"\x02\x00\x00\xff\xff\xfd!r\xe5"

func init() {
	schemas.Register(schema_8a6e4e6e3e2db81e,
		0x9bb0f31edcf7bd65)
}
